#!/usr/bin/env python
# -*- coding: utf-8 -*-

from os.path import (join, realpath)

from celorm.utils import OrmBase


# add search_path in search_rules.
search_rules = [
    join(realpath("."), "*", "model.py"),
    join(realpath("."), "*", "models.py"),
]


def _search_model():
    import glob
    from itertools import chain
    from importlib.machinery import SourceFileLoader

    mods_map = {}

    print("当前搜索规则是: {}\n".format(search_rules))
    mods = [glob.glob(ph) for ph in search_rules]
    mods = list(chain(*mods))

    for idx, mod_ph in enumerate(mods):
        msg = mod_ph
        try:
            mod = SourceFileLoader("dynamic_imp_mod.{}".format(idx), mod_ph).load_module()

            for o in dir(mod):
                _obj = type(getattr(mod, o))
                if issubclass(_obj, OrmBase) and hasattr(_obj, "__tablename__"):
                    mods_map[idx] = _obj

            msg = "\x1b[1;32m [I] 成功加载模型: {} \x1b[0m \n".format(mod_ph)

        except (Exception,) as e:
            msg = "\x1b[1;31m" \
                  "[E] 加载模型时，出现错误。\n模型路径: {}\n" \
                  "错误信息: {} \x1b[0m \n".format(mod_ph, e)
        finally:
            print(msg.strip() + "\n")
            del msg

    return mods_map


models_map = _search_model()
